{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Option","App","_react_16_8_6_react_default","a","createElement","es_form","style","marginTop","Item","label","labelCol","span","wrapperCol","input_number","min","max","defaultValue","className","href","es_switch","defaultChecked","slider","es_select","width","value","disabled","date_picker","offset","es_button","type","htmlType","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wVAIQA,sBAyDOC,EAvDH,kBACVC,EAAAC,EAAAC,cAAAC,EAAA,GAAMC,MAAO,CAAEC,UAAW,KACxBL,EAAAC,EAAAC,cAAAC,EAAA,EAAMG,KAAN,CACEC,MAAM,iCACNC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IAEpBT,EAAAC,EAAAC,cAAAS,EAAA,GAAaC,IAAK,EAAGC,IAAK,GAAIC,aAAc,IAC5Cd,EAAAC,EAAAC,cAAA,QAAMa,UAAU,iBAAhB,uBACAf,EAAAC,EAAAC,cAAA,KAAGc,KAAK,sBAAR,6BAEFhB,EAAAC,EAAAC,cAAAC,EAAA,EAAMG,KAAN,CACEC,MAAM,eACNC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IAEpBT,EAAAC,EAAAC,cAAAe,EAAA,GAAQC,gBAAc,KAExBlB,EAAAC,EAAAC,cAAAC,EAAA,EAAMG,KAAN,CACEC,MAAM,iCACNC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IAEpBT,EAAAC,EAAAC,cAAAiB,EAAA,GAAQL,aAAc,MAExBd,EAAAC,EAAAC,cAAAC,EAAA,EAAMG,KAAN,CACEC,MAAM,qBACNC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IAEpBT,EAAAC,EAAAC,cAAAkB,EAAA,GAAQN,aAAa,OAAOV,MAAO,CAAEiB,MAAO,MAC1CrB,EAAAC,EAAAC,cAACJ,EAAD,CAAQwB,MAAM,QAAd,QACAtB,EAAAC,EAAAC,cAACJ,EAAD,CAAQwB,MAAM,QAAd,QACAtB,EAAAC,EAAAC,cAACJ,EAAD,CAAQwB,MAAM,WAAWC,UAAQ,GAAjC,YACAvB,EAAAC,EAAAC,cAACJ,EAAD,CAAQwB,MAAM,YAAd,cAGJtB,EAAAC,EAAAC,cAAAC,EAAA,EAAMG,KAAN,CACEC,MAAM,iCACNC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IAEpBT,EAAAC,EAAAC,cAAAsB,EAAA,SAEFxB,EAAAC,EAAAC,cAAAC,EAAA,EAAMG,KAAN,CAAWI,WAAY,CAAED,KAAM,EAAGgB,OAAQ,IACxCzB,EAAAC,EAAAC,cAAAwB,EAAA,GAAQC,KAAK,UAAUC,SAAS,UAAhC,gBAGA5B,EAAAC,EAAAC,cAAAwB,EAAA,GAAQtB,MAAO,CAAEyB,WAAY,IAA7B,mBC1CcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4d5554d.chunk.js","sourcesContent":["import React from 'react';\nimport { Form, Select, InputNumber, DatePicker, Switch, Slider, Button } from 'antd';\nimport './App.css';\n\nconst { Option } = Select;\n\nconst App = () => (\n  <Form style={{ marginTop: 32 }}>\n    <Form.Item\n      label=\"数字输入框\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n    >\n      <InputNumber min={1} max={10} defaultValue={3} />\n      <span className=\"ant-form-text\"> 台机器</span>\n      <a href=\"https://ant.design\">链接文字</a>\n    </Form.Item>\n    <Form.Item\n      label=\"开关\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n    >\n      <Switch defaultChecked />\n    </Form.Item>\n    <Form.Item\n      label=\"滑动输入条\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n    >\n      <Slider defaultValue={70} />\n    </Form.Item>\n    <Form.Item\n      label=\"选择器\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n    >\n      <Select defaultValue=\"lucy\" style={{ width: 192 }}>\n        <Option value=\"jack\">jack</Option>\n        <Option value=\"lucy\">lucy</Option>\n        <Option value=\"disabled\" disabled>disabled</Option>\n        <Option value=\"yiminghe\">yiminghe</Option>\n      </Select>\n    </Form.Item>\n    <Form.Item\n      label=\"日期选择框\"\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n    >\n      <DatePicker />\n    </Form.Item>\n    <Form.Item wrapperCol={{ span: 8, offset: 8 }}>\n      <Button type=\"primary\" htmlType=\"submit\">\n        确定\n      </Button>\n      <Button style={{ marginLeft: 8 }}>\n        取消\n      </Button>\n    </Form.Item>\n  </Form>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}